{"version":3,"sources":["components/Monster-List/Monster/Monster.jsx","components/Monster-List/Monster-List.jsx","components/FilterMonster/FilterMonster.jsx","App.js","serviceWorker.js","index.js"],"names":["Monster","props","id","name","email","className","src","alt","MonsterList","monsters","map","monster","key","FilterMonster","onChange","changeFilterText","placeholder","App","state","filterText","onChangeFilterText","event","setState","target","value","fetch","then","response","json","this","filterMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uUAGaA,G,YAAU,SAACC,GAAW,IACzBC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAElB,OACE,yBAAKC,UAAU,WACb,yBAAKC,IAAG,+BAA0BJ,EAA1B,aAAyCK,IAAKJ,IACtD,4BAAKA,GACL,2BAAIC,MCNGI,G,MAAc,SAACP,GAAW,IAC7BQ,EAAaR,EAAbQ,SACR,OACE,yBAAKJ,UAAU,gBACZI,EAASC,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAD,CACEC,IAAKD,EAAQT,GACbC,KAAMQ,EAAQR,KACdC,MAAOO,EAAQP,MACfF,GAAIS,EAAQT,WCVTW,G,MAAgB,SAACZ,GAC5B,OACE,yBAAKI,UAAU,aACb,2BAAOS,SAAUb,EAAMc,iBAAkBC,YAAY,sBCiC5CC,E,4MAjCbC,MAAQ,CACNT,SAAU,GACVU,WAAY,I,EAGdC,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CAAEH,WAAYE,EAAME,OAAOC,S,kEAGtB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACjB,GACL,EAAKa,SAAS,CAAEb,SAAUA,S,+BAItB,IAAD,EAC0BoB,KAAKX,MAA9BT,EADD,EACCA,SAAUU,EADX,EACWA,WACZW,EAAiBrB,EAASsB,QAAO,SAACpB,GAAD,OACrCA,EAAQR,KAAK6B,cAAcC,SAASd,EAAWa,kBAGjD,OACE,yBAAK3B,UAAU,OACb,6CACA,kBAAC,EAAD,CAAeU,iBAAkBc,KAAKT,qBACtC,kBAAC,EAAD,CAAaX,SAAUqB,S,GA5BbI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b589edf8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Monster.css\";\r\n\r\nexport const Monster = (props) => {\r\n  const { id, name, email } = props;\r\n\r\n  return (\r\n    <div className=\"Monster\">\r\n      <img src={`https://robohash.org/${id}?set=set2`} alt={name} />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n","import React from \"react\";\r\nimport { Monster } from \"./Monster/Monster\";\r\nimport \"./Monster-List.css\";\r\n\r\nexport const MonsterList = (props) => {\r\n  const { monsters } = props;\r\n  return (\r\n    <div className=\"Monster-List\">\r\n      {monsters.map((monster) => (\r\n        <Monster\r\n          key={monster.id}\r\n          name={monster.name}\r\n          email={monster.email}\r\n          id={monster.id}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./FilterMonster.css\";\r\n\r\nexport const FilterMonster = (props) => {\r\n  return (\r\n    <div className=\"filterBox\">\r\n      <input onChange={props.changeFilterText} placeholder='Filter Monster'/>\r\n    </div>\r\n  );\r\n};\r\n\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { MonsterList } from \"./components/Monster-List/Monster-List\";\nimport { FilterMonster } from \"./components/FilterMonster/FilterMonster\";\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    filterText: \"\",\n  };\n\n  onChangeFilterText = (event) => {\n    this.setState({ filterText: event.target.value });\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((monsters) => {\n        this.setState({ monsters: monsters });\n      });\n  }\n\n  render() {\n    const { monsters, filterText } = this.state;\n    const filterMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(filterText.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Fight</h1>\n        <FilterMonster changeFilterText={this.onChangeFilterText} />\n        <MonsterList monsters={filterMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}